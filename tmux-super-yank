#!/usr/bin/env ruby
# vi: ft=ruby

# Setup
# tmux bind-key -n M-E run-shell -b "/home/todyam01/.tmux/plugins/tmux-scratchpad/scripts/scratch_pane.bash '$PWD/tmux-super-yank #{pane_id}'"
# tmux bind-key -n M-E run-shell -b "$PWD/tmux-super-yank #{pane_id}"

require 'open3'

# ==============================================================================
# FUNCTIONS
# ==============================================================================
# Run `tmux` command
def tmux(command)
	tmux_cmd = ['tmux'] + command
	#puts "$> #{tmux_cmd.join(' ')}"
	stdout, stderr, status = Open3.capture3(*tmux_cmd)
	raise "tmux command failed: '#{tmux_cmd.join(' ')}'" if status.exitstatus != 0
	return stdout
end

# Define a function to get character
if STDOUT.isatty
	def get_char
		begin
			system("stty raw -echo")
			char = STDIN.getc
		ensure
			system("stty -raw echo")
		end
		return char
	end
else
	require 'tempfile'
	$tempfile = Tempfile.new('tmux-super-yank')
	def get_char
		char_command = ['command-prompt', '-1', '-p', 'char:']
		char_command += ["run-shell \"printf '%1' > #{$tempfile.path}\""]
		tmux(char_command)
		char = ''
		char = $tempfile.read while char.empty?
		return char
	end
end

class String
	# Remove ANSI escape characters
	def noansi; return self.gsub(/\e\[([;\d]+)?m/, ''); end

	def match_with_pos(regex, group = 0)
		matches = Array.new
		self.split("\n").each_with_index do |line, row|
			#matches.append [line.match(regex), row]
			line.gsub(regex).each do
				match = Regexp.last_match
				matches.append [match[group], row, match.begin(0), match[group].length]
			end

		end
		return matches
	end
end


# ==============================================================================
# PANE
# ==============================================================================
class Pane
	attr_accessor :id
	attr_accessor :tty
	attr_accessor :mode
	attr_accessor :x
	attr_accessor :y
	attr_accessor :alt_screen
	attr_accessor :scroll_pos
	attr_accessor :rows
	attr_accessor :cols
	attr_accessor :contents

	def initialize(pane_id = nil)
		# Get source pane information
		format = '#{pane_id};#{pane_tty};#{pane_in_mode};#{cursor_x};#{cursor_y};#{alternate_on};#{scroll_position};#{pane_height};#{pane_width}'
		display_cmd = ['display-message', '-p','-F', format]
		display_cmd += ['-t', pane_id] if pane_id
		pane_info = tmux(display_cmd).chomp
		@id, @tty, @mode, @x, @y, @alt_screen, @scroll_pos, @rows, @cols = pane_info.split(';')
		@x = @x.to_i
		@y = @y.to_i
		@rows = @rows.to_i
		@cols = @cols.to_i
		@prompt_bg = "\e[100m#{' ' * @cols}"
	end

	# Screen control
	def capture()
		@contents = tmux(['capture-pane', '-p', '-e', '-t', @id])
		return @contents
	end
	def clear(); self.write("\e[2J\e[H") end
	def switch_alt(); self.write("\e[?1049h"); end
	def switch_back(); self.write("\e[?1049l"); end
	def revert_screen()
		self.switch_back()
		self.clear()
		self.write(@contents.chomp)
	end

	# Write to screen
	def write(string)
		File.write(@tty, string)
	end
	def write_at(x, y, string)
		self.write("\033[#{x};#{y}H#{string}")
	end
	def prompt(string)
		self.write_at(@rows, 0, @prompt_bg)
		self.write_at(@rows, 0, "\e[93m" + string)
	end
end


# ==============================================================================
# MAIN
# ==============================================================================
src_pane = Pane.new(ARGV[0])
src_contents = src_pane.capture().chomp

dest_pane = Pane.new(ARGV[1])
if dest_pane.id == src_pane.id
	dest_pane.capture()
	dest_pane.switch_alt()
	dest_pane.clear()
end
dest_pane.write(src_contents)
# TODO: Integrate pane swapping

# TODO: Find logic
matches = Array.new
matches += src_contents.noansi.match_with_pos(/.*î‚° *(.*)/, 1)

# Get selection
get_next = true
selection = ''
dest_pane.prompt('Enter selection or [q]uit: ')
while get_next
	begin
		char = get_char
		#dest_pane.write("#{char}(#{char.ord})")
		if char == 'q'
			get_next = false
			next
		end
		dest_pane.write(char)
	rescue
		next
	end
end
dest_pane.revert_screen() if dest_pane.id == src_pane.id

