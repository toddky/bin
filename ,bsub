#!/usr/bin/env ruby

# ==============================================================================
# ARGUMENTS
# ==============================================================================
require 'optparse'

# Default values
submit = true
user_options = Hash.new
bsub_options = Hash.new
bsub_options['P']  = ENV['LSB_DEFAULTPROJECT'] || 'PJ02911HIGH'
bsub_options['R']  = 'select[rhe7 && x86_64 && os64]'
bsub_options['Jd'] = 'svos-build'
bsub_options['W']  = '59'
bsub_options['M']  = ((2 ** 13) * 1000).to_s
bsub_options['q']  = ENV['LSB_DEFAULTQUEUE'] || 'PD'
bsub_options['o']  = 'output-lsf.%J.log'
command = nil
display = false

parser = OptionParser.new do |opts|
	opts.banner = "Usage: ,bsub [options] -- [COMMAND]"
	opts.separator ''
	opts.separator 'Options:'

	opts.on '-h', '--help', 'Show this message' do
		puts opts
		exit
	end
	opts.on '-n', '--no-submit', 'Do not submit job' do
		submit = false
	end

	opts.separator ''
	opts.on '-f', '--fg', 'Foreground job' do |opt|
		user_options['app'] = 'FG'
		bsub_options.delete('q')
	end
	opts.on '-i', '--interactive', 'Interactive job' do |opt|
		user_options['Is'] = nil
		user_options['XF'] = nil
		display = true
		bsub_options.delete('o')
	end
	opts.on '-m', '--memory [GB]', 'Max memory usage in GB (default=8)' do |opt|
		user_options['M'] = (opt.to_i * 1024000).to_s
	end
	opts.on '-t', '--time [HOURS]', 'Max run time in hours (default=1)' do |opt|
		user_options['W'] = (60 * opt.to_f).to_i.to_s
	end
	opts.on '--name [STRING]', 'Job name' do |opt|
		user_options['J'] = opt
	end

	# Default shell options
	opts.on '--shell', 'Use shell' do |opt|
		command = ['/arm/tools/setup/bin/mrun', '+zsh/zsh/5.7.1', 'zsh']
		max_hours = 685.5
		user_options['W'] = (60 * max_hours).to_i.to_s
		user_options['M'] = (16 * 1024000).to_s
		user_options['Is'] = nil
		user_options['XF'] = nil
		user_options['J'] = '$SHELL'
		display = true
		bsub_options.delete('o')
	end

	opts.separator ''
	opts.on '--max-time', 'Use max LSF time' do
		# This is just an estimate
		max_hours = 685.5
		user_options['W'] = (60 * max_hours).to_i.to_s
	end
end

# Parse arguments
begin
	parser.order!(ARGV)
rescue OptionParser::InvalidOption => e
	p e
	exit
end
if command.nil?
	command = ARGV
end
if command.empty?
	puts 'ERROR: Command not specified'
	submit = false
end

if display
	# TODO: check $DISPLAY
end

# ==============================================================================
# BSUB
# ==============================================================================
user_options.each { |option, value| bsub_options[option] = value }

# Create bsub command
bsub_command = ['bsub']
readable_command = 'bsub'
bsub_options.each do |option, value|
	bsub_command.append("-#{option}")
	readable_command += " -#{option}"
	if value
		bsub_command.append(value)
		if value =~ /[\[\]]/
			readable_command += " '#{value}'"
		else
			readable_command += " #{value}"
		end
	end
end
bsub_command += command
readable_command += ' ' + command.join(' ')

# Print LSF environment variables
ENV.sort.each do |key, value|
	next unless key =~ /^LS[BF]_/
	puts "#{key}=#{value}"
end

# Print and run
puts
puts "\$> #{readable_command}"
exit 1 if not submit
Kernel.exec(*bsub_command)

