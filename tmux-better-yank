#!/usr/bin/env python3
# USAGE: tmux-better-yank
# DESCRIPTION: TODO

# tmux bind-key -T prefixless M-y run-shell /home/$USER/bin/tmux-better-yank

# ==============================================================================
# IMPORT
# ==============================================================================
import atexit
import json
import os
import shutil
import subprocess
import re
import sys
import tempfile
import termios
import time
import tty

# ==============================================================================
# CAPTURE PANE
# ==============================================================================
pane_id = None
if len(sys.argv) > 1:
    pane_id = sys.argv[1]
capture_cmd = ['tmux', 'capture-pane', '-p', '-e']
if pane_id:
    capture_cmd += ['-t', pane_id]
pane_contents = subprocess.run(capture_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True).stdout.strip()

ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
lines = [ansi_escape.sub('', line.rstrip('\n')) for line in pane_contents.split('\n')]


# ==============================================================================
# FIND MATCHES
# ==============================================================================
def find_matches(lines, regex, group=1):
	'''
	Find matches in lines using regex and group
	'''
	matches = []
	for row, line in enumerate(lines):
		m = re.match(regex, line)
		if not m: continue
		start_col, end_col = m.span(group)
		matches.append([m.group(group), row, start_col, end_col-start_col])
	return matches

matches = {}

# todd 755 bin main » <command>
matches['command'] = find_matches(lines, r".*»\s*(\S.*)")

# lrwxrwxrwx 1 todd group   11 Jan  1 23:59 file -> /path/to/file
# drwxrwxrwx 1 todd group    0 Jan  1 23:59 dir/
# -rw-r--r-- 1 todd group  10K Jan  1 23:59 file.txt
perms = '[-dl][-r][-w][-x][-r][-w][-x][-r][-w][-x]'
matches['file'] = find_matches(lines, r"[-dl]([-r][-w][-x]){3}.* (\S+)", 2)


# ==============================================================================
# GENERATE HINTS
# ==============================================================================
hintchars = 'fdsavcxzrewqtgb1234567890jklmuiopyhn'
for key, value in matches.items():
	for i, match in enumerate(value):
		match.append(hintchars[i])


# ==============================================================================
# SCREEN
# ==============================================================================

# Hide cursor, show cursor on exit
def show_cursor(): print("\033[?25h")
atexit.register(show_cursor)
print("\033[?25l")

# Clear screen
clear_screen = "\033[H\033[J"

def xy(x, y):
    print("\033[{x};{y}H")

# Print hints
def print_hint(x, y, hint):
    print(f'\033[{x+2};{y+1}H\033[37;44;1m{hint}\033[0m')

print(clear_screen)
print(pane_contents)
for type, matches in matches.items():
    for match in matches:
        hint = f'{type[0]}{match[4]}'
        print_hint(match[1], match[2], hint)

# ==============================================================================
# GETCH
# ==============================================================================
fd = sys.stdin.fileno()
orig_settings = termios.tcgetattr(fd)
def reset_terminal():
    termios.tcsetattr(fd, termios.TCSADRAIN, orig_settings)
atexit.register(reset_terminal)

key = ''
while key != 'q':
    # read a single key from stdin
    tty.setraw(sys.stdin.fileno())
    key = sys.stdin.read(1)
    if key == 'q':
        break

