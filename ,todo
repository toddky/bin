#!/usr/bin/env ruby
# vim: ft=ruby noet ts=4 sw=0 sts

require 'securerandom'
require 'yaml'

# ==============================================================================
# HELP
# ==============================================================================
command = ARGV[0]
command = 'list' if ARGV.empty?

if command == 'help'
	puts <<~HELP
	Usage: todo [command] [options]

	Commands:
	  init                    Initialize a new todo list
	  add <project> <task>    Add a new task to the todo list
	  list                    List all tasks in the todo list
	  done <id>               Mark a task as done
	  remove <id>             Remove a task from the todo list

	Options:
	  -h, --help    Show this help message
	HELP
	exit
end


# ==============================================================================
# INIT
# ==============================================================================
home = File.expand_path('~')
todo_yaml = File.join(home, '.todo.yaml')
if ARGV[0] == 'init'
	if File.exist?(todo_yaml)
		puts "USER_ERROR: Unable to run init, todo list already exists at #{todo_yaml}"
		exit 1
	end
	File.write(todo_yaml, {}.to_yaml)
	puts "Initialized todo list at #{todo_yaml}"
	exit
end


# ==============================================================================
# LOAD
# ==============================================================================
if not File.exist?(todo_yaml)
	$stderr.puts "Todo list not found at #{todo_yaml}. Please run 'todo init' first."
	exit
end
projects = YAML.load_file(todo_yaml)


# ==============================================================================
# LIST
# ==============================================================================
red_circle    = '🔴'
orange_circle = '🟠'
yellow_circle = '🟡'
green_circle  = '🟢'
blue_circle   = '🔵'
purple_circle = '🟣'
black_circle  = '⚫️'
white_circle  = '⚪️'
brown_circle  = '🟤'

trash       = '🗑️'
not_started = '❌'
in_progress = '⏳'
done        = '✅'
star        = '⭐️'
critical    = '⚠️'
reminder    = '🔔'
note        = '📝'

urgent      = '❗️'
very_urgent = '‼️'
urgencies   = [very_urgent, urgent, ' ']

blocker     = '❌'
critical    = '⚠️'
importances = [blocker, critical, ' ']

bold_blue = "\e[1;34m"
reset = "\e[0m"

if command == 'list'
	if projects.empty?
		puts "No tasks found."
		exit
	else
		projects.each do |project, tasks|
			tasks.each_with_index do |task, index|
				id = "#{project}-#{task['id']}"
				importance = importances[task['importance'] || -1]
				urgency = urgencies[task['urgency'] || -1]
				done = task['finished_at'] ? done : ' '
				puts "#{urgency.ljust(2)}#{importance.ljust(2)}  #{bold_blue}#{id.rjust(3)}#{reset} #{task['summary']}"
			end
		end
	end
	exit
end


# ==============================================================================
# ADD
# ==============================================================================
if command == 'add'
	if ARGV.length < 3
		$stderr.puts "USER_ERROR: Please provide a project and task to add."
		exit 1
	end

	project = ARGV[1].upcase
	projects[project] ||= []
	size = projects[project].size

	summary = ARGV[2..-1].join(' ')

	task = Hash.new
	task['id']          = size + 1
	task['summary']     = summary
	task['created_at']  = Time.now
	task['finished_at'] = nil
	task['deleted_at']  = nil

	# Priority, lower is higher
	task['urgency']    = 2
	task['importance'] = 2
	task['impact']     = 1

	projects[project] << task
	File.write(todo_yaml, projects.to_yaml)
	puts "Added task '#{summary}' to project '#{project}'."
	exit
end


# ==============================================================================
# DUMP
# ==============================================================================
if command == 'dump'
	puts "todo=#{$0}"
	projects.each do |project, tasks|
		tasks.each do |task|
			puts "\"$todo\" add #{project} '#{task['summary']}'"
		end
	end
	exit
end

# ==============================================================================
# UNKNOWN
# ==============================================================================
# If we reach here, the command is unknown
$stderr.puts "USER_ERROR: Unknown command '#{command}'."
exit 1



