#!/usr/bin/env python3
# USAGE: ai-prompt-fix-python
# DESCRIPTION: TODO

import re
import subprocess

# ==============================================================================
# GET TMUX PANE CONTENT
# ==============================================================================
cmd = ['tmux', 'capture-pane', '-p', '-S', '-']
result = subprocess.run(cmd, capture_output=True)
stdout = result.stdout.decode('utf-8') 


# ==============================================================================
# PARSE COMMANDS
# ==============================================================================
prompt_re = r'^todd.*Â»\s*(.*)$'
timestamp_re = '\[\d{2}:\d{2}:\d{2}\] (Started|Finished)'
exited_re = r'\(exited \d+\)'

in_command = False
output = ''
cmd_output = []

for line in stdout.splitlines():

    if re.search(exited_re, line): continue
    if re.search(timestamp_re, line): continue

    if match := re.match(prompt_re, line):
        if in_command:
            cmd_output.append((command, output.strip()))
            output = ''

        command = match.group(1).strip()
        in_command = True
        continue

    if in_command:
        output += f'{line}\n'

#python_stacktrace_re = r'^\s*File ".*", line \d+, in .*$'
python_stacktrace_re = r'\s*File "(.*)"'

found_command = None
found_output = None
found_file = None

for command, output in reversed(cmd_output):
    if matches := re.findall(python_stacktrace_re, output):
        found_command = command
        found_output = output.strip()
        found_file = matches[0]
        break

if not found_command or not found_output or not found_file:
    print('No Python stack trace found in tmux pane.')
    exit(1)


# ==============================================================================
# AI PROMPT
# ==============================================================================
system_prompt = '''
You are a terminal assistant.
You will be given the contents of a tmux pane.
Your task is to identify a Python stack trace and provide a fix for the code.

You will be provided with the following format:
$ cat /path/to/file.py
$ command.py
Traceback (most recent call last):
  File "/path/to/file.py", line 10, in <module>
    main()
  File "/path/to/file.py", line 5, in main
    do_something()
  File "/path/to/file.py", line 2, in do_something
    raise ValueError("An error occurred")

You will respond with a code block that contains the following:
\`\`\`
PYTHON:/path/to/file
<<<<<<< SEARCH
original code
=======
new code to replace bad code
>>>>>>> REPLACE
\`\`\`
'''

with open(found_file, 'r') as f:
    found_file_content = f.read()

prompt = f'''
$ cat {found_file}
{found_file_content}
$ {found_command}
{found_output}
'''.strip()


# ==============================================================================
# RUN AI COMMAND
# ==============================================================================
cmd = ['ai']
cmd += ['--system-prompt', system_prompt]
cmd += ['--prompt', prompt]
result = subprocess.run(cmd, capture_output=True)
ai_response = result.stdout.decode('utf-8') 


# ==============================================================================
# APPLY FIX
# ==============================================================================
python_re = r'^PYTHON:\s*(?P<path>.*)\s*'
search_re = r'^<<<<<+ +SEARCH'
divider_re = r'^======+ *'
replace_re = r'^>>>>>+ +REPLACE'

in_search = False
in_replace = False

python = None
search = ''
replace = ''

for line in ai_response.splitlines():

    if not python:
        if match := re.match(python_re, line):
            python = match.group('path')
            continue
        continue

    if in_search:
        if re.match(divider_re, line):
            in_search = False
            in_replace = True
            continue
        search += line + '\n'
        continue

    if in_replace:
        if re.match(replace_re, line):
            in_replace = False
            continue
        replace += line + '\n'
        continue

    if re.match(search_re, line):
        in_search = True
        continue

if not python:
    print('ERROR: No Python file found in the input.')
    sys.exit(1)

print('\33[1;33mWould you like to fix the following error? (y/n)\33[0m')
print(f'Python file: {python}')
print('<<<<<<< SEARCH')
print(search, end='')
print('=======')
print(replace, end='')
print('>>>>>>> REPLACE')

response = input().strip().lower()

if response != 'y':
    print()
    print('No changes made.')
    exit(0)

with open(python, 'r') as f:
    content = f.read()

num_matches = len(re.findall(search, content))
if num_matches == 0:
    print('No matches found in the file.')
    exit(1)
elif num_matches > 1:
    print(f'ERROR: Found {num_matches} matches in the file. Please fix manually.')
content = content.replace(search, replace)
with open(python, 'w') as f:
    f.write(content)

