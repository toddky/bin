#!/usr/bin/env python3
# vim: ft=python ts=4 sw=4 et

# ==============================================================================
# IMPORT
# ==============================================================================
import argparse
import json
import os
import requests
import shutil
import subprocess
import sys

from pathlib import Path
from functools import cache


# ==============================================================================
# CONSOLE
# ==============================================================================
try:
    from rich.console import Console

except (ImportError, ModuleNotFoundError):
    if shutil.which('bat'):
        class Console:
            def __init__(self, *args, **kwargs):
                pass
            def print(self, *args, **kwargs):
                with Bat():
                    print(*args, **kwargs)
    else:
        class Console:
            def __init__(self, *args, **kwargs):
                pass
            def print(self, *args, **kwargs):
                print(*args, **kwargs)

# This class is used to redirect stdout to the bat command
class Bat:
    def __init__(self):
        pass

    def write(self, data):
        if self.process.stdin:
            self.process.stdin.write(data)
            self.process.stdin.flush()

    def flush(self):
        if self.process.stdin:
            self.process.stdin.flush()

    def __enter__(self):
        self.process = subprocess.Popen(
            ['bat', '--plain', '--language=markdown'],
            stdin=subprocess.PIPE,
            stdout=sys.__stdout__,
            text=True
        )
        self.original_stdout = sys.stdout
        sys.stdout = self
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        sys.stdout = self.original_stdout
        self.process.stdin.close()
        self.process.wait()


# ==============================================================================
# FUNCTIONS
# ==============================================================================
@cache
def get_url():
    url_file = Path.home() / '.ai_url'
    url = url_file.read_text().strip()
    return url

@cache
def get_api_key():
    api_key_file = Path.home() / '.ai_key'
    api_key = api_key_file.read_text().strip()
    return api_key

def ask(question, system_prompt, model):
    base_url = get_url()
    key = get_api_key()

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {key}"
    }
    url = f"{base_url}/chat/completions"

    messages = [
        {
            "role": "system",
            "content": system_prompt,
        },
        {
            "role": "user",
            "content": question,
        },
    ]

    payload = {
        "model": model,
        "messages": messages,
    }

    response = requests.post(url, headers=headers, json=payload)
    try:
        content = response.json()
    except json.JSONDecodeError:
        print(f"ERROR: Failed to decode JSON response:\n{response.text}", file=sys.stderr)
        sys.exit(1)

    # Check response
    if 'choices' not in content:
        error_msg = content
        if 'error' in content:
            error_msg = content['error']['message']['error']
        raise Exception(error_msg)

    return content['choices'][0]['message']['content']


# ==============================================================================
# MAIN
# ==============================================================================
if __name__ == "__main__":

    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Ask a question to the AI.')
    parser.add_argument('--model', default='azure/gpt-4o', help='AI model to use (default: azure/gpt-4o)')
    parser.add_argument('--system-prompt', default='You are a helpful assistant.', help='System prompt to use (default: "You are a helpful assistant.")')
    parser.add_argument('question', nargs='*', help='Question to ask the AI. Use "-" to read from stdin.')
    args = parser.parse_args()

    console = Console(width=120)

    # Get question from command line or stdin
    question = None
    if args.question == ['-']:
        question = sys.stdin.read().strip()
    elif args.question:
        question = ' '.join(args.question)

    if not question:
        print("Please provide a question as an argument or use '-' to read from stdin.", file=sys.stderr)
        sys.exit(1)

    # Ask question and get answer
    answer = ask(question, args.system_prompt, args.model)
    console.print(answer)

